# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GEDIexplorer
                                 A QGIS plugin
 this plugin will extract user selected data from GEDI file
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-03-22
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Kyaw Naing Win
        email                : kyawnaingwinknw@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt,QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsVectorLayer, QgsProject, QgsProject, QgsGeometry, QgsField, QgsFeature, QgsPointXY, QgsExpressionContextUtils 
from qgis.utils import iface
from qgis.gui import QgsMapToolIdentifyFeature, QgsMapToolIdentify

# Initialize Qt resources from file resources.py
from .resources import *
	
# Import the code for the DockWidget
from .gedi_explorer_dockwidget import GEDIexplorerDockWidget
import os.path

# Import Qt classes
from PyQt5.QtWidgets import QLabel,QPushButton, QSpinBox, QWidget #, QgsExtentGroupBox

# Import Matplotlib
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas


# Import hdf modules
import h5py
import pandas as pd
import numpy as np


class GEDIexplorer:
    """QGIS Plugin Implementation."""
    mapTool = None

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GEDIexplorer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GEDI Data Explorer')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'GEDIexplorer')
        self.toolbar.setObjectName(u'GEDIexplorer')

        #print "** INITIALIZING GEDIexplorer"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GEDIexplorer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/gedi_explorer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'GEDI Explorer'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING GEDIexplorer"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD GEDIexplorer"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GEDI Data Explorer'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------
    # soure code: https://www.youtube.com/watch?v=qwzapIxXRSQ
    class Canvas(FigureCanvas):
        def __init__(self, parent,t,s):
            fig, self.ax = plt.subplots (figsize=(4.5, 2.6), dpi=86)
            super().__init__(fig)
            self.setParent(parent)

            # Matplotlib Script
            #t = np.arange(0.0, 2.0, 0.01)
            #s = 1 + np.sin(2 * np.pi * t)
            
            self.ax.plot(t, s)

            self.ax.set(xlabel='time (s)', ylabel='voltage (mV)',
                   title='Matplotlib plot sample')
            self.ax.grid()


    def showGraph(self):
        ui = self.dockwidget
        widget_plot = ui.widget_plot
        
        t = np.arange(0.0, 2.0, 0.01)
        s = 1 + np.sin(2 * np.pi * t)
        
        demo = self.Canvas(widget_plot,t,s)#self.AppDemo(widget_plot)
        demo.show()
        
    class EmptyGraph(FigureCanvas):
        def __init__(self, parent):
            fig, self.ax = plt.subplots (figsize=(4.5, 2.6), dpi=86)
            super().__init__(fig)
            self.setParent(parent)
            self.ax.set(xlabel='', ylabel='', title='Unknown data')
            
    def showEmptyGraph(self):
        ui = self.dockwidget
        widget_plot = ui.widget_plot
        demo = self.EmptyGraph(widget_plot)#self.AppDemo(widget_plot)
        demo.show()
    
    class CanopyH(FigureCanvas):
        def __init__(self, parent,x,y):
            fig, self.ax = plt.subplots (figsize=(4.5, 2.6), dpi=86)
            super().__init__(fig)
            self.setParent(parent)

            """ 
            Matplotlib Script
            """
            #t = np.arange(0.0, 2.0, 0.01)
            #s = 1 + np.sin(2 * np.pi * t)
            
            self.ax.plot(x, y, 'o',c='green',markersize=0.5)

            self.ax.set(xlabel='shot index', ylabel='canopy height',
                   title='canopy heights')
            self.ax.grid()
            
    def plotCanopyHeight(self):
        ui = self.dockwidget
        widget_plot = ui.widget_plot
        
        ui_settings = self.getUIsettings()    
        beamName = ui_settings[0]
        
        path = self.dockwidget.mQgsFileWidget.filePath()
        gedi = h5py.File(path,'r')
        gedi_objs = []
        gedi.visit(gedi_objs.append)
        gediSDS = [o for o in gedi_objs if isinstance(gedi[o], h5py.Dataset)]
        beamSDS = [g for g in gediSDS if beamName in g]  # Subset to a single beam
        
        lonSample, latSample, shotSample, qualitySample, beamSample = [], [], [], [], []  # Set up lists to store data

        
        # Open the SDS
        try:
            level = gedi['METADATA']['DatasetIdentification'].attrs['shortName']
        except:
            level = 'unknown type'
        
        
        flag = 1
        if level=="GEDI_L1B":
            canopyElev = gedi[[g for g in beamSDS if g.endswith('/elevation_bin0')][0]][()]
            groundElev = gedi[[g for g in beamSDS if g.endswith('/elevation_lastbin')][0]][()]
            canopyHs = np.array(canopyElev) - np.array(groundElev)        
 
        elif level=="GEDI_L2A":
            canopyH = '/rh' # 100th colum is the highest
            canopyHs = np.array(gedi[[g for g in beamSDS if g.endswith(canopyH)][0]][()])
            canopyHs = canopyHs[:,100]
            print (canopyHs.shape)
            
        elif level=="GEDI_L2B":
            canopyH = '/rh100'
            canopyHs = gedi[[g for g in beamSDS if g.endswith(canopyH)][0]][()]
 
        
        else:
            flag = 0
            
        if flag:
            index = [i for i in range(len(canopyHs))]

            graph = self.CanopyH(widget_plot,index,canopyHs)
            graph.show()
            
        else:
            graph = self.EmptyGraph(widget_plot)
            graph.show()
            print ("unknow GEDI data")
        

    #-------------------------------
    # code source:https://gis.stackexchange.com/questions/365233/call-a-qgsmaptoolidentifyfeature-maptool-with-a-button-in-a-qgis3-plugin    
    def onFeatureIdentified(self,feature):
        print ("feature selected : "+ feature['shot_number'] + str(feature.id()))
       
    def identify(self):
        myLayer=iface.activeLayer()
        self.mapTool.setLayer(myLayer)
        self.iface.mapCanvas().setMapTool(self.mapTool)
    '''    mapTool = None
        mc=iface.mapCanvas()
        lyr=iface.activeLayer()
        mapTool = QgsMapToolIdentifyFeature(mc)
        mapTool.setLayer(lyr)
        mc.setMapTool(mapTool)
        mapTool.featureIdentified.connect(onFeatureIdentified)'''
        
    '''
    # code source: https://gis.stackexchange.com/questions/422256/qgis-3-identify-tool-programmatically-accessing-derived-info-in-identify-r
    class selectTool(QgsMapToolIdentify):
        
        def __init__(self, iface):
            self.iface = iface
            self.canvas = self.iface.mapCanvas()
            self.layer = self.iface.activeLayer()
            QgsMapToolIdentify.__init__(self, self.canvas)
            self.iface.currentLayerChanged.connect(self.active_changed)
            
        def active_changed(self, layer):
            if isinstance(layer, QgsVectorLayer) and layer.isSpatial():
                self.layer = layer
                
        def canvasPressEvent(self, event):
            results = self.identify(event.x(), event.y(), [self.layer], QgsMapToolIdentify.TopDownAll)
            for i in range(len(results)):
                print(results[i].mDerivedAttributes)
            
            
        def deactivate(self):
            self.iface.currentLayerChanged.disconnect(self.active_changed) 
    
    def identify(self):
        print ("identify tool is activated")
        t = self.selectTool(iface)
        self.iface.mapCanvas().setMapTool(t)
    '''
    def getUIsettings(self):
        ui = self.dockwidget
        ui_elements = []
        
        if ui.radioButton_0101.isChecked():
            beamName = "BEAM0101"
        
        if ui.radioButton_0110.isChecked():
            beamName = "BEAM0110"
        
        if ui.radioButton_1000.isChecked():
            beamName = "BEAM1000"
        
        if ui.radioButton_1011.isChecked():
            beamName = "BEAM1011"
        ui_elements.append(beamName)
        
        if ui.checkBox_groundElevation.isChecked(): ui_elements.append("ground_elevation")            
        if ui.checkBox_canopyElevation.isChecked(): ui_elements.append("canopy_elevation")            
        if ui.checkBox_pai.isChecked(): ui_elements.append("pai")        
        if ui.checkBox_paiz.isChecked(): ui_elements.append("pai_z")        
        if ui.checkBox_pavdz.isChecked(): ui_elements.append("pavd_z")        
        if ui.checkBox_fhd.isChecked(): ui_elements.append("fhd")
        if ui.checkBox_quality.isChecked(): ui_elements.append("quality_flag")
        if ui.checkBox_sensitivity.isChecked(): ui_elements.append("sensitivity")
        if ui.checkBox_cropWithCanvasExtent.isChecked(): ui_elements.append("crop")

        return ui_elements
    
    def onFileBrowse(self):
        fileInfo = self.dockwidget.findChild(QLabel,"label_info")
        path = self.dockwidget.mQgsFileWidget.filePath()
        flag = False
        if path.lower().endswith(".hdf")|path.lower().endswith(".h5"):
            gedi = h5py.File(path,'r')
            try:
                text ='<span style="color:green">' + gedi['METADATA']['DatasetIdentification'].attrs['shortName'] + ': '
                text = text + gedi['METADATA']['DatasetIdentification'].attrs['purpose'] +'</span>'
                flag = True
            except:
                text = '<span style="color:red">not GEDI data</span>'   
                
        else:
            text = '<span style="color:red">unknown format</span>'
            
            
        
        fileInfo.setText(text)
        
        self.dockwidget.findChild(QPushButton, "pushButton_showSample").setEnabled(flag)
        self.dockwidget.findChild(QPushButton, "pushButton_extractData").setEnabled(flag)
        self.dockwidget.findChild(QPushButton, "pushButton_metadata").setEnabled(flag)
 
    
    def showSample(self):
        self.extractGEDIData(True)
            
    def extractData(self):
        self.extractGEDIData(False)
        
    def extractGEDIData(self, isSample=True):
        ui_settings = self.getUIsettings()    
        beamName = ui_settings[0]
        
        if isSample:
            sampleInterval = self.dockwidget.findChild(QSpinBox,"spinBox_sampleInterval").value()
            suffix = "_sample-data"
        else:
            sampleInterval = 1
            suffix = "_data"
        
        path = self.dockwidget.mQgsFileWidget.filePath()
        gedi = h5py.File(path,'r')
        gedi_objs = []
        gedi.visit(gedi_objs.append)
        gediSDS = [o for o in gedi_objs if isinstance(gedi[o], h5py.Dataset)]
        beamSDS = [g for g in gediSDS if beamName in g]  # Subset to a single beam
        
        lonSample, latSample, shotSample, qualitySample, beamSample = [], [], [], [], []  # Set up lists to store data

        
        # Open the SDS
        try:
            level = gedi['METADATA']['DatasetIdentification'].attrs['shortName']
        except:
            level = 'unknown type'
        
        
        flag = 1
        if level=="GEDI_L2B":
            lat_dataset = '/lat_lowestmode'
            lon_dataset = '/lon_lowestmode'
            quality_flag = '/l2b_quality_flag' 
        elif level=="GEDI_L2A":
            lat_dataset = '/lat_lowestmode_a1'
            lon_dataset = '/lon_lowestmode_a1'
            quality_flag = '/quality_flag_a1' 
        elif level=="GEDI_L1B":
            lat_dataset = '/latitude_bin0'
            lon_dataset = '/longitude_bin0'
            quality_flag = '' 
        else:
            flag = 0
            
        if flag:    
            shots = gedi[f'{beamName}/shot_number'][()]
            lats = gedi[[g for g in beamSDS if g.endswith(lat_dataset)][0]][()]
            lons = gedi[[g for g in beamSDS if g.endswith(lon_dataset)][0]][()]
            if quality_flag:
                quality = gedi[[g for g in beamSDS if g.endswith(quality_flag)][0]][()]
            else:
                quality = [-1 for i in range (len(shots))]
            # Take every nth shot and append to list
            if "crop" in ui_settings:
                canvasExtent = iface.mapCanvas().extent()
                e = canvasExtent.xMaximum()
                w = canvasExtent.xMinimum()
                s = canvasExtent.yMinimum()
                n = canvasExtent.yMaximum()
                latlons = np.vstack((lats,lons))
                indexs = np.where((latlons[0]>s)&(latlons[0]<n)&(latlons[1]>w)&(latlons[1]<e))
                start = indexs [0][0]
                end = indexs [0][-1] + 1
            else:
                start = 0
                end = len(shots)
            for i in range(start,end,sampleInterval):
                shotSample.append(str(shots[i]))
                lonSample.append(lons[i])
                latSample.append(lats[i])
                qualitySample.append(int(quality[i]))
                beamSample.append(beamName)
                
            
            
            # creat memory layer for samples
            lyr = QgsVectorLayer("Point", level+"_"+ beamName + suffix, "memory")
            QgsExpressionContextUtils.setLayerVariable(lyr,'GEDI_Level', level)
            QgsExpressionContextUtils.setLayerVariable(lyr,'GEDI_File', path)
            QgsExpressionContextUtils.setLayerVariable(lyr,'GEDI_Beam', beamName)
            
            provider = lyr.dataProvider()
            lyr.startEditing()
            provider.addAttributes( [ QgsField("shot_number", QVariant.String),
                   QgsField("quality",  QVariant.Int)])
            # add features
            
            for pt in zip(lonSample,latSample,shotSample,qualitySample):
                feat = QgsFeature()
                feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(pt[0],pt[1])) )
                feat.setAttributes( [pt[2],pt[3]])
                #feat.setAttributes( [1 , QVariant(pt[3])])
                                  
                provider.addFeatures( [ feat ] )
            
            lyr.commitChanges()
            QgsProject.instance().addMapLayer(lyr)
        else:
            print ("unknow data")
        
        
    
    def metadata(self):
        if self.dockwidget.radioButton_0101.isChecked():
            beam = "BEAM0101"
        
        if self.dockwidget.radioButton_0110.isChecked():
            beam = "BEAM0110"
        
        if self.dockwidget.radioButton_1000.isChecked():
            beam = "BEAM1000"
        
        if self.dockwidget.radioButton_1011.isChecked():
            beam = "BEAM1011"
        objs = ['shot_number','lat_lowestmode',
        'lon_lowestmode',        
        'l2b_quality_flag', 'sensitivity', 
        'digital_elevation_model']

        
    def getShortName(self, hdf):
        if hdf.endswith(".hdf"):
            gedi = h5py.File(hdf,'r')
            return gedi['METADATA']['DatasetIdentification'].attrs['shortName']
        else:
            return ('unknow')


    def close(self):
        self.dockwidget.close()
        
    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING GEDIexplorer"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = GEDIexplorerDockWidget()
                
                # shot identify tool
                self.mapTool = QgsMapToolIdentifyFeature(self.iface.mapCanvas())
                self.mapTool.featureIdentified.connect(self.onFeatureIdentified)
                
                # connect to button and actions
                self.dockwidget.pushButton_showSample.clicked.connect(self.showSample)
                self.dockwidget.pushButton_extractData.clicked.connect(self.extractData)
                self.dockwidget.pushButton_metadata.clicked.connect(self.metadata)
                self.dockwidget.pushButton_plotCanopyHeight.clicked.connect(self.plotCanopyHeight)
                self.dockwidget.pushButton_identify.clicked.connect(self.identify)
                #self.dockwidget.checkBox_identify.clicked.connect(self.identify)
                self.dockwidget.mQgsFileWidget.fileChanged.connect(self.onFileBrowse)
                self.dockwidget.pushButton_close.clicked.connect(self.close)
            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
            self.showGraph()
